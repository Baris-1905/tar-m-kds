
import streamlit as st
import json

# Sayfa stili ve baÅŸlÄ±k
st.markdown(
    """
    <style>
    .stApp {
        background-color: #f0fff0;
    }
    h1 {
        text-align: center;
        color: #2e7d32;
        font-size: 36px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown("<h1>HÄ±nÄ±s TarÄ±mÄ± Ä°Ã§in Karar Destek Sistemi</h1>", unsafe_allow_html=True)
st.subheader("ğŸ‘‹ HoÅŸ geldiniz! LÃ¼tfen giriÅŸ yapÄ±nÄ±z.")

# GiriÅŸ tipi seÃ§imi
giris_tipi = st.radio("Veri GiriÅŸ TÃ¼rÃ¼nÃ¼ SeÃ§in", ["Manuel GiriÅŸ", "Drone / Cihaz Verisi (JSON)"])

# Ortak algoritmalar
def ekim_zamani_onerisi(urun, don_riski, urun_cesidi):
    if urun == "bugday":
        if don_riski == "Evet" and urun_cesidi == "geÃ§Ã§i":
            return "GeÃ§Ã§i Ã§eÅŸit don riskine uygunsuz. Ä°lkbahar sonu Ã¶nerilir."
        return "Ä°lkbahar sonu (don riski geÃ§ince)" if don_riski == "Evet" else "Sonbahar (AÄŸustos sonu - EylÃ¼l baÅŸÄ±)"
    elif urun == "arpa":
        return "EylÃ¼l ortasÄ± (kÄ±ÅŸlÄ±k) veya Nisan sonu (ilkbahar)"
    elif urun == "fasulye":
        return "MayÄ±s ortasÄ± (don riski geÃ§tikten sonra)"
    return "Bilinmeyen Ã¼rÃ¼n"

def gubre_tavsiyesi(organik_madde, fosfor, toprak_tipi):
    tavsiyeler = []
    if organik_madde < 2:
        tavsiyeler.append("Organik gÃ¼bre (ahÄ±r gÃ¼bresi)")
    if fosfor < 5:
        tavsiyeler.append("Fosforlu gÃ¼bre (DAP, TSP)")
    if toprak_tipi == "killi":
        tavsiyeler.append("Killi toprakta yavaÅŸ Ã§Ã¶zÃ¼nen gÃ¼breler tercih edilmelidir")
    if not tavsiyeler:
        tavsiyeler.append("Toprak besin deÄŸerleri yeterli")
    return ", ".join(tavsiyeler)

def tahmini_verim(urun, sulama_var_mi, yillik_yagis, toprak_tipi):
    verim_degerleri = {
        "bugday": (124, 196),
        "arpa": (150, 200),
        "fasulye": (180, 210)
    }
    verim = verim_degerleri.get(urun, (0, 0))[1 if sulama_var_mi == "Evet" else 0]
    uyari = None
    if yillik_yagis < 300:
        verim *= 0.75
        uyari = "DÃ¼ÅŸÃ¼k yaÄŸÄ±ÅŸ nedeniyle verim dÃ¼ÅŸebilir."
    if toprak_tipi == "killi" and sulama_var_mi == "HayÄ±r":
        verim *= 0.9
        uyari = (uyari or "") + " Killi toprakta sulama yoksa verim azalabilir."
    return round(verim, 1), uyari

def gelismis_sulama_takvimi(urun, et0=4.3):
    evreler_dict = {
        "bugday": [
            {"isim": "BaÅŸlangÄ±Ã§", "gun": "0â€“15", "kc": 0.3},
            {"isim": "GeliÅŸim", "gun": "15â€“40", "kc": 0.7},
            {"isim": "Orta Evre", "gun": "40â€“65", "kc": 1.15},
            {"isim": "Son Evre", "gun": "65â€“90", "kc": 0.25}
        ],
        "arpa": [
            {"isim": "BaÅŸlangÄ±Ã§", "gun": "0â€“12", "kc": 0.3},
            {"isim": "GeliÅŸim", "gun": "12â€“35", "kc": 0.6},
            {"isim": "Orta Evre", "gun": "35â€“60", "kc": 1.05},
            {"isim": "Son Evre", "gun": "60â€“85", "kc": 0.2}
        ],
        "fasulye": [
            {"isim": "BaÅŸlangÄ±Ã§", "gun": "0â€“10", "kc": 0.4},
            {"isim": "GeliÅŸim", "gun": "10â€“30", "kc": 0.7},
            {"isim": "Orta Evre", "gun": "30â€“55", "kc": 1.05},
            {"isim": "Son Evre", "gun": "55â€“75", "kc": 0.3}
        ]
    }

    if urun not in evreler_dict:
        return ["Bu Ã¼rÃ¼n iÃ§in sulama takvimi mevcut deÄŸil."]

    takvim = []
    for evre in evreler_dict[urun]:
        etc = round(et0 * evre["kc"], 2)
        if etc < 2:
            tavsiye = "Sulama gerekmez veya 10 gÃ¼nde bir"
        elif 2 <= etc < 4:
            tavsiye = "HaftalÄ±k sulama Ã¶nerilir"
        else:
            tavsiye = "Her 2-3 gÃ¼nde bir sulama Ã¶nerilir"

        takvim.append(
            f"{evre['isim']} evresi ({evre['gun']} gÃ¼n): Kc={evre['kc']} â†’ ETc={etc} mm/gÃ¼n â†’ {tavsiye}"
        )

    return takvim

# Drone JSON yÃ¼kleme
if giris_tipi == "Drone / Cihaz Verisi (JSON)":
    dosya = st.file_uploader("ğŸ“‚ Drone JSON Verisini YÃ¼kleyin", type="json")
    if dosya is not None:
        veri = json.load(dosya)
        urun = veri["urun"]
        toprak_ph = veri["toprak_ph"]
        organik_madde = veri["organik_madde"]
        fosfor = veri["fosfor"]
        sulama_var_mi = veri["sulama_var_mi"]
        don_riski = veri["don_riski"]
        yillik_yagis = veri["yillik_yagis"]
        toprak_tipi = veri["toprak_tipi"]
        urun_cesidi = veri["urun_cesidi"]

        st.success("Drone verisi baÅŸarÄ±yla yÃ¼klendi ve analiz baÅŸladÄ±.")
        st.write("ğŸ“‹ AÅŸaÄŸÄ±da analiz sonuÃ§larÄ± yer almaktadÄ±r:")

        sonuc = {}
        sonuc["ekim_zamani"] = ekim_zamani_onerisi(urun, don_riski, urun_cesidi)
        sonuc["gubre_tavsiyesi"] = gubre_tavsiyesi(organik_madde, fosfor, toprak_tipi)
        verim, uyari = tahmini_verim(urun, sulama_var_mi, yillik_yagis, toprak_tipi)
        sonuc["tahmini_verim_kg_da"] = verim
        if uyari:
            sonuc["uyari"] = uyari

        st.subheader("ğŸŒ± Ã–neriler")
        st.success(f"**Ekim ZamanÄ±:** {sonuc['ekim_zamani']}")
        st.info(f"**GÃ¼bre Tavsiyesi:** {sonuc['gubre_tavsiyesi']}")
        st.success(f"**Tahmini Verim:** {sonuc['tahmini_verim_kg_da']} kg/da")
        if "uyari" in sonuc:
            st.warning(sonuc["uyari"])

        st.subheader("ğŸ“† GeliÅŸmiÅŸ Sulama Takvimi (FAO 56 Uyumlu)")
        for satir in gelismis_sulama_takvimi(urun):
            st.markdown(f"- {satir}")

# Manuel form alanlarÄ±
elif giris_tipi == "Manuel GiriÅŸ":
    urun = st.selectbox("ÃœrÃ¼n SeÃ§in", ["bugday", "arpa", "fasulye"])
    toprak_ph = st.number_input("Toprak pH DeÄŸeri", min_value=4.0, max_value=9.0, value=7.0, step=0.1)
    organik_madde = st.number_input("Organik Madde (%)", min_value=0.0, max_value=10.0, value=2.0, step=0.1)
    fosfor = st.number_input("Fosfor (Pâ‚‚Oâ‚…) kg/da", min_value=0.0, max_value=20.0, value=5.0, step=0.1)
    sulama_var_mi = st.radio("Sulama Var mÄ±?", ["Evet", "HayÄ±r"])
    don_riski = st.radio("Don Riski Var mÄ±?", ["Evet", "HayÄ±r"])
    yillik_yagis = st.number_input("YÄ±llÄ±k YaÄŸÄ±ÅŸ (mm)", min_value=0, max_value=1000, value=450, step=10)
    toprak_tipi = st.selectbox("Toprak Tipi", ["tÄ±nlÄ±", "killi-tÄ±nlÄ±", "killi"])
    urun_cesidi = st.selectbox("ÃœrÃ¼n Ã‡eÅŸidi", ["erkenci", "geÃ§Ã§i", "yerli tohum"])

    if st.button("Hesapla"):
        sonuc = {}
        sonuc["ekim_zamani"] = ekim_zamani_onerisi(urun, don_riski, urun_cesidi)
        sonuc["gubre_tavsiyesi"] = gubre_tavsiyesi(organik_madde, fosfor, toprak_tipi)
        verim, uyari = tahmini_verim(urun, sulama_var_mi, yillik_yagis, toprak_tipi)
        sonuc["tahmini_verim_kg_da"] = verim
        if uyari:
            sonuc["uyari"] = uyari

        st.subheader("ğŸŒ± Ã–neriler")
        st.success(f"**Ekim ZamanÄ±:** {sonuc['ekim_zamani']}")
        st.info(f"**GÃ¼bre Tavsiyesi:** {sonuc['gubre_tavsiyesi']}")
        st.success(f"**Tahmini Verim:** {sonuc['tahmini_verim_kg_da']} kg/da")
        if "uyari" in sonuc:
            st.warning(sonuc["uyari"])

        st.subheader("ğŸ“† GeliÅŸmiÅŸ Sulama Takvimi (FAO 56 Uyumlu)")
        for satir in gelismis_sulama_takvimi(urun):
            st.markdown(f"- {satir}")
